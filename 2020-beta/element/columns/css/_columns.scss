@charset "utf-8";
/*
 * Author: Joshua Balsillie
 * Date Created: 2016-08-20
 * Description: define column styles
 */
@use '../../../variable/_all/css/variable';

.oneColumn, .twoColumn, .threeColumn, .fourColumn {
	variable.$rowPadding: 1rem !default; // variable to override

	display: block;
	padding-bottom: variable.$rowPadding;
	padding-top: variable.$rowPadding;
	vertical-align: top;
	
	// Clear defaults
	font-size: 0; // fixes spacing issues

	& > * {
		// Individual column definition
		display: inline-block;
		vertical-align: top;
		box-sizing: border-box;
		
		&.oneHalf {
			// Individual column definition for half width
			@include variable.responsive( width, 100% * ( 1 / 2 ), 100% * ( 1 / 2 ), 100% ); // 1/2, 1/2, 1
		}
		&.oneThird {
			// Individual column definition for third width
			@include variable.responsive( width, 100% * ( 1 / 3 ), 100% * ( 1 / 2 ), 100% ); // 1/3, 1/2, 1
		}
		&.twoThirds {
			// Individual column definition for two thirds width
			@include variable.responsive( width, 100% * ( 2 / 3 ), 100% * ( 1 / 2 ), 100% ); // 2/3, 1/2, 1
		}
		&.oneQuarter {
			// Individual column definition for one quarter width
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
		&.threeQuarters {
			// Individual column definition for three quarters width
			@include variable.responsive( width, 100% * ( 3 / 4 ), 100% * ( 1 / 2 ), 100% ); // 3/4, 1/2, 1
		}
	}
}
.oneColumn > * {
	variable.$rowPadding: 1rem !default; // variable to override

	padding-left: 0;
	padding-right: 0;
	width: 100%;

	&:nth-child(1n+2) {
		padding-top: variable.$rowPadding;
	}
}
.twoColumn {
	& > * {
		variable.$columnPadding: 1rem !default; // variable to override
		variable.$rowPadding: 1rem !default; // variable to override

		@include variable.responsive( width, 100% * ( 1 / 2 ), 100% * ( 1 / 2 ), 100% ); // 1/2, 1/2, 1

		// all displays
		&:nth-child(2n+1) {
			@include variable.responsive( padding-left, 0, 0, 0 );
			@include variable.responsive( padding-right, variable.$columnPadding * ( 1 / 2 ), variable.$columnPadding * ( 1 / 2 ), 0 );
			padding-top: 0;
		}
		&:nth-child(2n+2) {
			@include variable.responsive( padding-left, variable.$columnPadding * ( 1 / 2 ), variable.$columnPadding * ( 1 / 2 ), 0 );
			@include variable.responsive( padding-right, 0, 0, 0 );
			@include variable.responsive( padding-top, 0, 0, variable.$rowPadding );
		}
		&:nth-child(2n+3), &:nth-child(2n+4) {
			padding-top: variable.$rowPadding;
		}
	}
	&.ratio_1-2 {
		& > *:nth-child(2n+1) {
			@include variable.responsive( width, 100% * ( 1 / 3 ), 100% * ( 1 / 2 ), 100% ); // 1/3, 1/2, 1
		}
		& > *:nth-child(2n+2) {
			@include variable.responsive( width, 100% * ( 2 / 3 ), 100% * ( 1 / 2 ), 100% ); // 2/3, 1/2, 1
		}
	}
	&.ratio_2-1 {
		& > *:nth-child(2n+1) {
			@include variable.responsive( width, 100% * ( 2 / 3 ), 100% * ( 1 / 2 ), 100% ); // 2/3, 1/2, 1
		}
		& > *:nth-child(2n+2) {
			@include variable.responsive( width, 100% * ( 1 / 3 ), 100% * ( 1 / 2 ), 100% ); // 1/3, 1/2, 1
		}
	}
	&.ratio_1-3 {
		& > *:nth-child(2n+1) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
		& > *:nth-child(2n+2) {
			@include variable.responsive( width, 100% * ( 3 / 4 ), 100% * ( 1 / 2 ), 100% ); // 3/4, 1/2, 1
		}
	}
	&.ratio_3-1 {
		& > *:nth-child(2n+1) {
			@include variable.responsive( width, 100% * ( 3 / 4 ), 100% * ( 1 / 2 ), 100% ); // 3/4, 1/2, 1
		}
		& > *:nth-child(2n+2) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
	}
}
.threeColumn {
	& > * {
		variable.$columnPadding: 1rem !default; // variable to override
		variable.$rowPadding: 1rem !default; // variable to override

		@include variable.responsive( width, 100% * ( 1 / 3 ), 100% * ( 1 / 2 ), 100% ); // 1/3, 1/2, 1

		// large and small display
		&:nth-child(3n+1) {
			@include variable.responsive( padding-left, 0, null, 0 );
			@include variable.responsive( padding-right, variable.$columnPadding * ( 2 / 3 ), null, 0 );
			padding-top: 0;
		}
		&:nth-child(3n+2) {
			@include variable.responsive( padding-left, variable.$columnPadding * ( 1 / 3 ), null, 0 );
			@include variable.responsive( padding-right, variable.$columnPadding * ( 1 / 3 ), null, 0 );
			@include variable.responsive( padding-top, 0, null, variable.$rowPadding );
		}
		&:nth-child(3n+3) {
			@include variable.responsive( padding-left, variable.$columnPadding * ( 2 / 3 ), null, 0 );
			@include variable.responsive( padding-right, 0, null, 0 );
			@include variable.responsive( padding-top, 0, variable.$rowPadding, variable.$rowPadding );
		}
		&:nth-child(3n+4), &:nth-child(3n+5), &:nth-child(3n+6) {
			padding-top: variable.$rowPadding;
		}
		// medium display
		&:nth-child(2n+1) {
			@include variable.responsive( padding-left, null, 0, null );
			@include variable.responsive( padding-right, null, variable.$columnPadding * ( 1 / 2 ), null );
		}
		&:nth-child(2n+2) {
			@include variable.responsive( padding-left, null, variable.$columnPadding * ( 1 / 2 ), null );
			@include variable.responsive( padding-right, null, 0, null );
		}
	}
	&.ratio_1-1-2 {
		& > *:nth-child(3n+1) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
		& > *:nth-child(3n+2) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
		& > *:nth-child(3n+3) {
			@include variable.responsive( width, 100% * ( 1 / 2 ), 100% * ( 1 / 2 ), 100% ); // 1/2, 1/2, 1
		}
	}
	&.ratio_1-2-1 {
		& > *:nth-child(3n+1) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
		& > *:nth-child(3n+2) {
			@include variable.responsive( width, 100% * ( 1 / 2 ), 100% * ( 1 / 2 ), 100% ); // 1/2, 1/2, 1
		}
		& > *:nth-child(3n+3) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
	}
	&.ratio_2-1-1 {
		& > *:nth-child(3n+1) {
			@include variable.responsive( width, 100% * ( 1 / 2 ), 100% * ( 1 / 2 ), 100% ); // 1/2, 1/2, 1
		}
		& > *:nth-child(3n+2) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
		& > *:nth-child(3n+3) {
			@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1
		}
	}
}
.fourColumn {
	& > * {
		variable.$columnPadding: 1rem !default; // variable to override
		variable.$rowPadding: 1rem !default; // variable to override

		@include variable.responsive( width, 100% * ( 1 / 4 ), 100% * ( 1 / 2 ), 100% ); // 1/4, 1/2, 1

		// large and small display
		&:nth-child(4n+1) {
			@include variable.responsive( padding-left, 0, null, 0 );
			@include variable.responsive( padding-right, variable.$columnPadding * ( 3 / 4 ), null, 0 );
			padding-top: 0;
		}
		&:nth-child(4n+2) {
			@include variable.responsive( padding-left, variable.$columnPadding * ( 1 / 4 ), null, 0 );
			@include variable.responsive( padding-right, variable.$columnPadding * ( 1 / 2 ), 0, 0 );
			@include variable.responsive( padding-top, 0, 0, variable.$rowPadding );
		}
		&:nth-child(4n+3) {
			@include variable.responsive( padding-left, variable.$columnPadding * ( 1 / 2 ), 0, 0 );
			@include variable.responsive( padding-right, variable.$columnPadding * ( 1 / 4 ), null, 0 );
			@include variable.responsive( padding-top, 0, variable.$rowPadding, variable.$rowPadding );
		}
		&:nth-child(4n+4) {
			@include variable.responsive( padding-left, variable.$columnPadding * ( 3 / 4 ), null, 0 );
			@include variable.responsive( padding-right, 0, 0, 0 );
			@include variable.responsive( padding-top, 0, variable.$rowPadding, variable.$rowPadding );
		}
		&:nth-child(4n+5), &:nth-child(4n+6), &:nth-child(4n+7), &:nth-child(4n+8) {
			padding-top: variable.$rowPadding;
		}
		// medium display
		&:nth-child(2n+1) {
			@include variable.responsive( padding-left, null, 0, null );
			@include variable.responsive( padding-right, null, variable.$columnPadding * ( 1 / 2 ), null );
		}
		&:nth-child(2n+2) {
			@include variable.responsive( padding-left, null, variable.$columnPadding * ( 1 / 2 ), null );
			@include variable.responsive( padding-right, null, 0, null );
		}
	}
}